#
# baseimage Dockerfile
#
# https://github.com/jlesage/docker-baseimage
#

ARG BASEIMAGE=unknown

# Pull base image.
FROM ${BASEIMAGE}

# Define software related variables.
ARG MINIT_VERSION=efcaa46
ARG MINIT_URL=https://github.com/jlesage/minit/archive/${MINIT_VERSION}.tar.gz
ARG LIBOWFAT_VERSION=0.31
ARG LIBOWFAT_URL=https://www.fefe.de/libowfat/libowfat-${LIBOWFAT_VERSION}.tar.xz
ARG LOGMONITOR_VERSION=4c7a259
ARG LOGMONITOR_URL=https://github.com/jlesage/logmonitor/archive/${LOGMONITOR_VERSION}.tar.gz
ARG SUEXEC_VERSION=0.2
ARG SUEXEC_URL=https://github.com/ncopa/su-exec/archive/v${SUEXEC_VERSION}.tar.gz

# Variables needed for package installation via APT.
ARG DEBIAN_FRONTEND=noninteractive
ARG TERM=xterm

# QEMU architecture to use when cross-building image for a platform different
# from host's one.
ARG QEMU_ARCH=unknown

# Define working directory.
WORKDIR /tmp

# Copy helpers.
COPY helpers/* /usr/local/bin/

# Copy the QEMU static binary, used to build this image for different architectures on x64 hosts.
# NOTE: This line will be uncommented by the build script if required.
#COPY qemu-${QEMU_ARCH}-static /usr/bin/

# Compile and install minit.
RUN \
    add-pkg --virtual build-dependencies \
        build-essential \
        curl \
        ca-certificates \
        && \
    mkdir libowfat minit && \
    curl -# -L ${LIBOWFAT_URL} | tar xJ --strip 1 -C libowfat && \
    curl -# -L ${MINIT_URL} | tar xz --strip 1 -C minit && \
    # Compile libowfat.
    cd libowfat && \
    sed-patch 's|$(DIET) $(CCC) -g -o $@ t.o|$(DIET) $(CCC) -no-pie -g -o $@ t.o|' GNUmakefile && \
    make -j$(nproc) && \
    cd .. && \
    # Compile minit.
    cd minit && \
    make MINITROOT=/var/run/minit MINIT_LOG_PREFIX="[supervisor] " LOG_SERVICE_STATE=1 && \
    cd .. && \
    # Install minit.
    cp -v minit/minit /usr/bin/ && \
    cp -v minit/msvc /usr/bin/ && \
    # Cleanup
    del-pkg build-dependencies && \
    rm -rf /tmp/* /tmp/.[!.]*

# Compile and install logmonitor.
RUN \
    add-pkg --virtual build-dependencies \
        curl \
        ca-certificates \
        gcc \
        make \
        libc6-dev \
        && \
    # Download.
    mkdir logmonitor && \
    curl -# -L ${LOGMONITOR_URL} | tar xz --strip 1 -C logmonitor && \
    # Compile.
    cd logmonitor && \
    make && \
    cd .. && \
    # Install.
    cp -v logmonitor/logmonitor /usr/bin/ && \
    strip /usr/bin/logmonitor && \
    # Cleanup.
    del-pkg build-dependencies && \
    rm -rf /tmp/* /tmp/.[!.]*

# Compile and install su-exec.
RUN \
    add-pkg --virtual build-dependencies \
        curl \
        ca-certificates \
        gcc \
        make \
        libc6-dev \
        && \
    # Download.
    mkdir su-exec && \
    curl -# -L ${SUEXEC_URL} | tar xz --strip 1 -C su-exec && \
    # Compile.
    cd su-exec && \
    make && \
    cd .. && \
    # Install.
    cp -v su-exec/su-exec /usr/bin/ && \
    strip /usr/bin/su-exec && \
    # Cleanup.
    del-pkg build-dependencies && \
    rm -rf /tmp/* /tmp/.[!.]*

# Make sure VERSION_CODENAME is set in /etc/os-release.
RUN \
    if ! grep -q "^VERSION_CODENAME=" /etc/os-release; then \
        add-pkg lsb-release && \
        echo "VERSION_CODENAME=$(lsb_release -c -s)" >> /etc/os-release && \
        del-pkg lsb-release; \
    fi

# Add files.
COPY rootfs/ /

# Make sure all required directory exists.
RUN \
    mkdir -p \
        /defaults \
        /etc/cont-init.d \
        /etc/cont-finish.d \
        /etc/services.d \
        /etc/cont-env.d

# QEMU static binary no longer required, remove it if was installed.
RUN rm -f /usr/bin/qemu-${QEMU_ARCH}-static

# Set public environment variables.
# NOTE: Since variables declared here are exposed/visible to the end-users,
#       they should be meaningful to them, i.e. they should act as a way to
#       configure the container.
ENV USER_ID=1000 \
    GROUP_ID=1000 \
    SUP_GROUP_IDS= \
    UMASK=022 \
    TZ=Etc/UTC \
    KEEP_APP_RUNNING=0 \
    APP_NICENESS=

# Define mountable directories.
VOLUME ["/config"]

# Define default command.
CMD ["/etc/minit/init"]

# Metadata.
ARG IMAGE_VERSION=unknown
LABEL \
      org.label-schema.name="baseimage" \
      org.label-schema.description="A minimal docker baseimage to ease creation of long-lived application containers" \
      org.label-schema.version="${IMAGE_VERSION}" \
      org.label-schema.vcs-url="https://github.com/jlesage/docker-baseimage" \
      org.label-schema.schema-version="1.0"
